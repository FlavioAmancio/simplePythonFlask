# Nome do nosso WorkFlow
name: Application Test

# Onde nosso teste será executado
on:

# Será executada a cada push que for realizado
  push:

  # Executando em todas as Branches
    branches:
      - '*'

# Definindo variáveis
env:
  IMAGE_NAME: aula-cicd

# Iniciando a definição do nossos Jobs
jobs:

# Primeiro Job de teste
  test:
    name: "Teste da Aplicação"

    # Declarando onde nosso teste irá rodar, no github podemos rodar em máquinas Linux
    runs-on: ubuntu-latest

    # Utilizando Matrix
    strategy:
      fail-fast: false
      matrix:

        # Aqui ele estará rodando em uma imagem
        container:
          - "docker.io/python:3.12.1-bullseye"
          - "docker.io/python:3.11.9-bullseye"
          - "docker.io/python:3.10.14-bullseye"

    # Aqui estamos criando 03 containers para testar em diferentes versões do Python
    container:
      image: ${{ matrix.container }}

    # Pode ser um container que vamos utilizar para fazer testes
    services:

      # Container que irá rodar o banco do postgres
      postgres:
        image: postgres

        # Variáveis do Banco
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: myuser
          POSTGRES_DB: mydb
    
    # Primeiro step fazendo Build da imagem do Docker
    steps:

      # Atualizando PIP
      - name: "Pip Upgrade"
        run: pip install --upgrade pip

      # Utilizando a action do checkout do github, vai clonar o repositório
      - uses: actions/checkout@v4

      # Instalando as dependências do pip que utilizamos
      - name: "Install pip deps"
        run: pip install -r requirements.txt

      # Rodando as migrations do Python
      - name: "Run Migrations"
        run: python wrapped/manage.py migrate

      # Rodando os testes utilizando o -v 3 para que possa sair em modo verboso
      - name: "Run Tests"
        run: cd wrapped && python manage.py test -v 3


  build:
    name: "Construção do Container"

    # Aqui temos um Depends on, que só será executado se nosso teste passar
    needs: test

    # Declarando onde nosso teste irá rodar, no github podemos rodar em máquinas Linux
    runs-on: ubuntu-latest
    steps:

      # Utilizando a action do checkout do github, vai clonar o repositório
      - uses: actions/checkout@v4

      # Fazendo somente um build da imagem para ver se consegur buildar
      - name: "Build the container image"

      # Utilizando variáveis de próprio github, file é o nome do nosso arquivo, utilizando a variável criada e a variável do github com o hash do commit
        run: docker build . --file Containerfile --tag $IMAGE_NAME:${GITHUB_SHA}  